name: Prod Server

on:
  push:
    branches:
      - master
env:
  DOCKER_COMPOSE_FILE: docker-compose.yaml
  HASHTAG: new_prod
  WORK_PATH: /root/project_directory/

jobs:
  test-lint:
    name: Test & Lint
    runs-on: ubuntu-22.04

    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
          POSTGRES_HOST: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:7.4.0-alpine
        ports:
          - "6379:6379"

    env:
      POETRY_VERSION: 1.2.2
      PYTHON_VERSION: 3.11.0
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: free disk space
        run: |
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo apt clean
          df -h

      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Create env file
        working-directory: src/core
        run: |
          echo '${{ secrets.REPO_ENV_FILE }}' > .env

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        id: cached-poetry-dependencies
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: poetry install --no-interaction --no-root
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

      - name: Install wtpslit
        run: poetry add wtpsplit
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

      - name: Install packages
        run: poetry run python -m spacy download ru_core_news_sm
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

      - name: Apply migrations
        run: |
          poetry run python src/manage.py migrate

      - name: Run tests and collect coverage
        run: |
            make test

      - name: disk space
        run: |
          df -h

  build_and_push_to_docker_hub:
    needs: test-lint
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: free disk space
        run: |
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo apt clean
          df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: infra/Dockerfile
          push: true
          tags: ${{ secrets.REGISTRY }}/${{ secrets.REGISTRY_ID }}/${{name}}:${{ env.HASHTAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: disk space
        run: |
          df -h

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - name: download new image and stop server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODSERVER }}
          username: ${{ secrets.PRODSERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ${{ env.WORK_PATH }}
            echo ${{ secrets.REGISTRY_TOKEN }} | docker login -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin ${{ secrets.REGISTRY }}
            docker pull ${{ secrets.REGISTRY }}/${{ secrets.REGISTRY_ID }}/$${{ name }}:${{ env.HASHTAG }}
            docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} down

      - uses: actions/checkout@v4
      - name: copy file via ssh password
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PRODSERVER }}
          username: ${{ secrets.PRODSERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "infra/docker-compose.yaml, infra/nginx/nginx.prod.conf"
          target: ${{ env.WORK_PATH }}
          strip_components: 1


      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODSERVER }}
          username: ${{ secrets.PRODSERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ${{ env.WORK_PATH }}
            chmod +x entrypoint.sh
            docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} up -d --build
            docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} exec -T backend python manage.py migrate
            docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} exec -T backend python manage.py collectstatic --no-input
            docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} exec -T backend cp -r /app/core/collected_static/. /backend_static/static/
            if [ -n "$(docker images -f dangling=true -q)" ]; then
              docker images -f dangling=true -q | xargs docker rmi
            else
              echo "No images to remove."
            fi
