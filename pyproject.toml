[tool.poetry]
name = "Example Project"
version = "0.0.0"
description = ""
authors = ["Vitali Varabyeu <varabyeu.v@gmail.com>"]

[tool.poetry.dependencies]
python = "~3.11"
Django = "<5.0"
bcrypt = "*"
django-behaviors = "*"
django-environ = "*"
django-ipware = "*"
django-axes = "*"
django-storages = "*"
djangorestframework = "3.15.2"
djangorestframework-camel-case = "*"
django-split-settings = "*"
django_linear_migrations = "*"
redis = "*"
sentry-sdk = "*"
Pillow = "*"
psycopg2-binary = "*"
drf-spectacular = { extras = ["sidecar"], version = "^0.27.0" }
whitenoise = "^6.6.0"
celery = "^5.3.4"
djangorestframework-simplejwt = "^5.3.0"
django-anymail = "^10.2"
simplejson = "^3.19.2"
django-cors-headers = "^4.3.1"
weasyprint = "^60.1"
pip = "^23.3.2"
transaction = "^4.0"
requests-mock = "^1.11.0"
pydantic = "^2.5.3"
httplib2 = "^0.22.0"
google-api-python-client = "^2.111.0"
pytest-asyncio = "^0.23.3"
ruff = "^0.6.0"
djoser = "^2.2.2"
django-dbbackup = "^4.1.0"
django-apscheduler = "^0.7.0"
boto3 = "^1.34.39"
ffmpeg-python = "^0.2.0"
pytube = "^15.0.0"
gunicorn = "^21.2.0"
django-filter = "^23.5"
flower = "^2.0.1"
yt-dlp = "2024.12.6"
vk = "^3.0"
webvtt-py = "^0.4.6"
tqdm = "^4.66.4"
numpy = "^1.26.4"
pypandoc = "^1.13"
markdown = "^3.6"
gensim = "^4.3.2"
markdown-pdf = "^1.2"
scipy = "1.10.1"
factory-boy = "^3.3.0"
faker = "6.0.0"
django-simple-history = "^3.7.0"
django-templated-mail = "^1.1.1"
isodate = "^0.7.2"
django-object-actions = "^4.3.0"
mdit-py-plugins = "^0.4.2"
pdfkit = "^1.0.0"

[tool.poetry.group.dev.dependencies]
ipython = "*"

pytest-django = ">=3.9"
pytest-deadfixtures = "*"
pytest-env = "*"
pytest-freezegun = "*"
pytest-mock = "*"
pytest-randomly = "*"
pytest-httpx = "*"

dotenv-linter = "*"

freezegun = "*"
mixer = "*"

jedi = "*"

django-stubs = "*"
djangorestframework-stubs = "*"
types-freezegun = "*"
types-Pillow = "*"
celery-stubs = "^0.1.3"
responses = "^0.24.0"
black = "^24.0.0"
requests-mock = "^1.11.0"
pytest-lazy-fixture = "^0.6.3"
types-python-dateutil = "^2.8.19.14"
types-pytest-lazy-fixture = "^0.6.3.4"
pytest-cov = "^4.1.0"
pytest-xdist = "^3.5.0"
pytest = "^7.4.3"
types-simplejson = "^3.19.0.2"
pre-commit = "^4.0.0"
spacy = "^3.7.5"
wtpsplit = "^2.0.5"

[tool.pytest.ini_options]
python_files = "tests.py test_*.py *_tests.py"
pythonpath = "src"
DJANGO_SETTINGS_MODULE = "core.settings"
asyncio_mode = "auto"
addopts = ["--reuse-db"]
markers = [
  "freeze_time: freezing time marker (pytest-freezegun does not register it)",
]
filterwarnings = [# Pattern: `action:message:category:module:line` (https://docs.python.org/3/library/warnings.html#describing-warning-filters)
  "error",
  "ignore:.*'rest_framework_jwt.blacklist' defines default_app_config.*You can remove default_app_config.::django",
  "ignore:distutils Version classes are deprecated. Use packaging.version instead.:DeprecationWarning:pytest_freezegun:17",
  "ignore:SelectableGroups dict interface is deprecated. Use select",
  "ignore:pkg_resources is deprecated as an API.",
  "ignore::pytest.PytestUnraisableExceptionWarning",
]
env = [
  "AWS_ACCESS_KEY_ID = zeroc00l94",
  "AWS_S3_ENDPOINT_URL = https://fra1.digitaloceanspaces.com",
  "AWS_S3_REGION_NAME = fra1",
  "AWS_SECRET_ACCESS_KEY = h4xx0r",
  "AWS_STORAGE_BUCKET_NAME = pwned_data",
  "CI=1",
  "CELERY_TASK_ALWAYS_EAGER=True",
  "DISABLE_THROTTLING=True",
]

[tool.coverage.run]
omit = [
    "*/tests/*",
    "*/testing/*",
    "*/__init__.py",
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  "migrations",
  "test_transcript_creator.py",
  "tests/*"
]

line-length = 120
indent-width = 4
target-version = "py311"

[tool.ruff.lint]
select = [
  "F", "E", "W", "C90", "I", "N", "UP", "YTT", "ANN", "ASYNC", "S",
  "BLE", "FBT", "B", "A", "COM", "C4", "DTZ", "T10", "DJ", "EXE", "FA",
  "ISC", "ICN", "G", "PIE", "T20", "PYI", "PT", "Q", "RSE", "RET", "SLF",
  "SLOT", "SIM", "TID", "TCH", "INT", "TD", "FIX", "ERA", "PD",
  "PL", "TRY", "FLY", "NPY", "AIR", "PERF", "RUF",
]

ignore = [
    "ANN101",  # missing-type-self
    "ANN401",  # any-type
    "ANN102",  # missing-type-cls
    "S101",  # Use of assert detected
    "TRY003",  # Avoid specifying long messages outside the exception class
    "RUF012",  # Mutable class attributes should be annotated with typing.ClassVar
    "G004",  # Logging statement uses f-string
    "BLE001",  # Do not catch blind exception: {name}
    "N806",  # Variable {name} in function should be lowercase
    "TRY401",  # Redundant exception object included in logging.exception call
    "FBT001",  # Boolean-typed positional argument in function definition
    "RUF001",  # ambiguous-unicode-character-string
    "B007",  # Loop control variable {name} not used within loop body
    "RSE102",  # Unnecessary parentheses on raised exception
    "FBT002",  # boolean-default-value-positional-argument
    "INT001",  # f-string-in-get-text-func-call
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"*/tests/*" = ["ANN401"]
"*/testing/*" = ["ANN"]
"**/management/**" = ["ANN"]

[tool.black]
skip-string-normalization = true
line-length = 120

[tool.mypy]
plugins = ["mypy_django_plugin.main", "mypy_drf_plugin.main"]
python_version = 3.11
show_error_codes = true
pretty = true
ignore_missing_imports = true


[tool.django-stubs]
django_settings_module = "core.settings"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
